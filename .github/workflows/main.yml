name: Action to build and publish the project as a nuget package to github package registry

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
        type: choice
        options:
          - info
          - warning
          - debug
      
jobs:
  build:
    runs-on: self-hosted
    outputs: 
      Version: ${{ steps.gitversion.outputs.SemVer }}
      CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }} 

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 #fetch-depth is needed for GitVersion
        
    #Install and calculate the new version with GitVersion  
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: 5.x
    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v1.1.1
      id: gitversion # step id used as reference for output values
    - name: Display GitVersion outputs
      run: |
        echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.CommitsSinceVersionSource }}"
    
    #Build/pack the project
    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v4
    #   with:
    #     dotnet-version: 8.0.x
    # - name: Build and Pack NuGet package
    #   run: dotnet pack SqlDbMigrator.Migrator/DbMigrator.csproj -p:Version='${{ steps.gitversion.outputs.SemVer }}' -c Release
    # - name: Upload NuGet package as artifact
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: nugetPackage
    #     path: ./SqlDbMigrator.Migrator/bin/Release
    - name: Build dotnet
      run: dotnet build --configuration Release
        
    - name: Package
      run: >
        dotnet pack SqlDbMigrator.Migrator/DbMigrator.csproj 
        -p:Version='${{ steps.gitversion.outputs.SemVer }}' -c Release --output .
        
    - name: Publish
      run: >
        dotnet nuget push SqlDbMigrator.${{ steps.gitversion.outputs.SemVer }}.nupkg 
        -s https://nuget.pkg.github.com/danniwezz/index.json
        -k ${{ secrets.NUGET_PACKAGE_TOKEN }} 
      
  # release:
  #   runs-on: self-hosted    
  #   needs: build
  #   # if: github.ref == 'refs/heads/master' # only run job if on the master branch   
    
  #   steps:  
  #   #Push NuGet package to GitHub packages
  #   - name: Download nuget package artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: nugetPackage
  #   - name: Prep packages
  #     run: dotnet nuget add source --username danniwezz --password ${{ secrets.NUGET_PACKAGE_TOKEN }} --store-password-in-clear-text --name SqlDbMigrator.${{needs.build.outputs.Version}} "https://nuget.pkg.github.com/danniwezz/index.json"
  #   - name: Push package to GitHub packages 
  #     # if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change  
  #     run: dotnet nuget push nugetPackage/*.nupkg --api-key ${{ secrets.NUGET_PACKAGE_TOKEN }}  --source "github"
    
  #   #Create release
  #   - name: Create Release
  #     # if: 1 == 0 #needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.NUGET_PACKAGE_TOKEN }} 
  #     with:
  #       tag_name: ${{ needs.build.outputs.Version }}
  #       release_name: SqlDbMigrator.${{ needs.build.outputs.Version }}
  #   - name: Publish nuget to github
  #     # if: needs.build.outputs.CommitsSinceVersionSource > 0 #Only release if there has been a commit/version change
  #     uses: ncipollo/release-action@v1
  #     with:
  #       tag: ${{ needs.build.outputs.Version }}
  #       name: SqlDbMigrator ${{ needs.build.outputs.Version }}
  #       artifacts: "nugetPackage/*"
  #       token: ${{ secrets.NUGET_PACKAGE_TOKEN }}
